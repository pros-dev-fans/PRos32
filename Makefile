include cfg/Makefile.header

CFLAGS += -I./include 
LDFLAGS += -Ttext 0

VERSION_H := include/generated/version.h
VERSION_STRING := $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)$(VERSION_SUFFIX)
BADGE_VERSION := $(shell echo $(VERSION_STRING) | sed 's/-/--/g')

.PHONY: all clean boot version.h init drivers fs kernel_ kernel image hdd_image

all: hdd_image

boot:
	@make -C boot/

init: version.h
	@echo "\033[0;32mCompiling init..\033[0m"
	@$(CC) $(CFLAGS) -c init/main.c -o init/init.o

drivers:
	@for f in $(wildcard drivers/cmos/*.c); do echo "\033[0;32mCompiling CMOS driver..\033[0m \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done
	@for f in $(wildcard drivers/keyboard/*.c); do echo "\033[0;32mCompiling keyboard driver..\033[ \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done
	@for f in $(wildcard drivers/vga_tty/*.c); do echo "\033[0;32mCompiling VGA TTY driver..\033[0m \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done
	@for f in $(wildcard drivers/mouse/*.c); do echo "\033[0;32mCompiling mouse driver..\033[0m \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done
	@for f in $(wildcard drivers/pata_pio/*.c); do echo "\033[0;32mCompiling PATA PIO driver..\033[0m \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done

fs:
	@for f in $(wildcard fs/FATs/FAT32/*.c); do echo "\033[0;32mCompiling FAT32 FS..\033[0m \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done

kernel_:
	@for f in $(wildcard kernel/*.c); do echo "\033[0;32mCompiling kernel piece..\033[0m \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done
	@for f in $(wildcard kernel/memory/*.c); do echo "\033[0;32mCompiling memory operations..\033[0m \033[34m$$f\033[0m"; $(CC) -c $(CFLAGS) $$f; done


kernel: boot init drivers fs kernel_
	@$(LD) $(LDFLAGS) --section-start=.text=0x7E00 -o boot/KERNEL_.BIN boot/KERNEL_ENTRY.o init/*.o *.o
	@cp boot/KERNEL_.BIN boot/KERNEL.BIN
	@$(STRIP) boot/KERNEL.BIN
	@$(OBJCOPY) $(OBJCOPYFLAGS) boot/KERNEL.BIN

image: kernel
	@dd if=/dev/zero of=$(IMAGE_NAME) count=2880 bs=512
	@mkfs.fat -F 12 $(IMAGE_NAME)
	@dd if=boot/MBR.BIN of=$(IMAGE_NAME) conv=notrunc
	@mcopy -i $(IMAGE_NAME) boot/SETUP.BIN ::/
	@mcopy -i $(IMAGE_NAME) boot/KERNEL.BIN ::/

hdd_image: image
	@echo "\033[0;35mUnmounting the image before continuing, you can safely ignore those errors."
	@echo "\033[0;33m"
	@make unmount_image
	@echo "\033[0m"
	@dd if=/dev/zero of=$(HDD_IMAGE) bs=1M count=70
	@parted -s $(HDD_IMAGE) mklabel msdos
	@parted -s $(HDD_IMAGE) mkpart primary 1MiB 34MiB
	@parted -s $(HDD_IMAGE) mkpart primary 35MiB 69MiB
	@LOOP_DEVICE=$$(sudo losetup --find --show $(HDD_IMAGE)); \
	LOOP_NUMBER=$$(basename $$LOOP_DEVICE | sed 's/[^0-9]//g'); \
	MAPPER=/dev/mapper/loop$$LOOP_NUMBER; \
	sudo kpartx -av $$LOOP_DEVICE; \
	while [ ! -e $${MAPPER}p1 ]; do sleep 0.1; done; \
	while [ ! -e $${MAPPER}p2 ]; do sleep 0.1; done; \
	sudo mkfs.fat -F 32 $${MAPPER}p1; \
	sudo mkfs.ext2 $${MAPPER}p2; \
	sudo mcopy -i $${MAPPER}p1 $(MEMDISK) ::/; \
	sudo mcopy -i $${MAPPER}p1 $(IMAGE_NAME) ::/fd.img; \
	sudo mkdir -p $(GRUB_MOUNT); \
	sudo mount $${MAPPER}p1 $(GRUB_MOUNT); \
	sudo mkdir -p $(GRUB_MOUNT)/boot/grub/; \
	sudo cp cfg/grub.cfg $(GRUB_MOUNT)/boot/grub/grub.cfg; \
	sudo grub-install \
		--target=i386-pc \
		--boot-directory=$(GRUB_MOUNT)/boot \
		--modules="part_msdos fat" \
		--recheck \
		--force \
		$$LOOP_DEVICE;
	@make unmount_image
	@parted -s $(HDD_IMAGE) unit B print

unmount_image:
	-@LOOP_DEVICE=$$(sudo losetup -j $(HDD_IMAGE) | cut -d: -f1); \
	sudo umount $(GRUB_MOUNT); \
	sudo $(RM) $(GRUB_MOUNT); \
	sudo kpartx -d $$LOOP_DEVICE; \
	sudo losetup -d $$LOOP_DEVICE

version.h:
	@mkdir -p include/generated
	@echo "// This file is automatically generated, do not touch it. To change the current version, use cfg/Makefile.header" > $(VERSION_H)
	@echo "#ifndef VERSION_H" >> $(VERSION_H)
	@echo "#define VERSION_H" >> $(VERSION_H)
	@echo "" >> $(VERSION_H)
	@echo "#define VERSION_MAJOR $(VERSION_MAJOR)" >> $(VERSION_H)
	@echo "#define VERSION_MINOR $(VERSION_MINOR)" >> $(VERSION_H)
	@echo "#define VERSION_PATCH $(VERSION_PATCH)" >> $(VERSION_H)
	@echo "#define VERSION_SUFFIX \"$(VERSION_SUFFIX)\"" >> $(VERSION_H)
	@echo "#define VERSION_STRING \"$(VERSION_STRING)\"" >> $(VERSION_H)
	@echo "" >> $(VERSION_H)
	@echo "#endif" >> $(VERSION_H)

update_badge:
	@sed -i "s|https://img.shields.io/badge/version-[^?)]*|https://img.shields.io/badge/version-$(BADGE_VERSION)-orange|" readme.md

format:
	@find . -name '*.h' -o -name '*.c' | xargs clang-format -i

clean:
	@$(RM) *.img include/generated/
	@find . -type f \( -name "*.o" -o -name "*.BIN" \) -exec rm -f {} +
